{"version":3,"sources":["webpack:///scripts/app.js","webpack:///webpack/bootstrap 59857446ce4d3bc48bca","webpack:///./src/js/app.js","webpack:///./src/js/lib/adClientLibrary.js"],"names":["wisp","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","AdClientLibrary","undefined","_adClientLibrary","_adClientLibrary2","myAdInstance","containerId","updateInterval","runAd","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","config","this","adPool","adServerUrl","isAdBeingFetched","adContainer","document","getElementById","console","error","isNaN","_this","adData","pop","innerHTML","ad","handleScripts","intervalId","setInterval","bind","request","XMLHttpRequest","responseType","addEventListener","response","open","send","_this2","push","interval","clearInterval","_this3","scriptsHtmlCollection","getElementsByTagName","scriptsArray","forEach","scriptElement","newScript","createElement","type","src","text","replace","removeChild","appendChild","window","adScriptIntervalId","obs","MutationObserver","mutations","observer","removedNodes","observe","childList"],"mappings":"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","file":"scripts/app.js","sourcesContent":["var wisp =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.AdClientLibrary = undefined;\n\t\n\tvar _adClientLibrary = __webpack_require__(1);\n\t\n\tvar _adClientLibrary2 = _interopRequireDefault(_adClientLibrary);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// import '../styles/app.scss';\n\t\n\tvar wisp = {};\n\t\n\twisp.AdClientLibrary = _adClientLibrary2.default;\n\t\n\tvar myAdInstance = new wisp.AdClientLibrary({\n\t    'containerId': 'topBanner',\n\t    'updateInterval': 3\n\t});\n\t\n\t// myAdInstance.setUpdateInterval(1);\n\t\n\tmyAdInstance.runAd();\n\t\n\t// let myAdInstance2 = new wisp.AdClientLibrary({\n\t//     'containerId': 'bottomBanner',\n\t//     'updateInterval': 5\n\t// });\n\t\n\t// myAdInstance2.runAd();\n\t\n\t// setTimeout(() => {\n\t//     console.log('changed interval');\n\t//     myAdInstance.setUpdateInterval(10);\n\t// },\n\t// 8000);\n\t\n\texports.AdClientLibrary = _adClientLibrary2.default;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar AdClientLibrary = function () {\n\t    function AdClientLibrary(config) {\n\t        _classCallCheck(this, AdClientLibrary);\n\t\n\t        this.config = config;\n\t        this.adPool = [];\n\t        this.adServerUrl = 'https://5xhlcfzk8c.execute-api.eu-west-1.amazonaws.com/prod/mock-engine'; //?forceAdId=2';\n\t        this.isAdBeingFetched = false;\n\t\n\t        this.adContainer = document.getElementById(this.config.containerId);\n\t\n\t        if (!this.adContainer) {\n\t            console.error('Wrong \"containerId\" - \"' + this.config.containerId + '\". There is no such element with that id.');\n\t        }\n\t\n\t        if (isNaN(this.config.updateInterval % 1)) {\n\t            console.error('Wrong \"updateInterval\" - \"' + this.config.updateInterval + '\". Please provide valid number.');\n\t        }\n\t    }\n\t\n\t    _createClass(AdClientLibrary, [{\n\t        key: 'runAd',\n\t        value: function runAd() {\n\t            var _this = this;\n\t\n\t            if (!this.adContainer) {\n\t                return;\n\t            }\n\t\n\t            if (this.adPool.length) {\n\t                var adData = this.adPool.pop();\n\t\n\t                this.adContainer.innerHTML = adData.ad;\n\t                this.handleScripts();\n\t\n\t                if (!this.intervalId) {\n\t                    this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n\t                }\n\t\n\t                return;\n\t            }\n\t\n\t            if (this.isAdBeingFetched) {\n\t                return;\n\t            }\n\t\n\t            var request = new XMLHttpRequest();\n\t\n\t            request.responseType = 'json';\n\t            request.addEventListener('progress', function () {\n\t                _this.isAdBeingFetched = true;\n\t            });\n\t            request.addEventListener('error', function () {\n\t                _this.isAdBeingFetched = false;\n\t            });\n\t            request.addEventListener('abort', function () {\n\t                _this.isAdBeingFetched = false;\n\t            });\n\t            request.addEventListener('load', function () {\n\t                _this.isAdBeingFetched = false;\n\t\n\t                _this.adContainer.innerHTML = request.response.ad;\n\t                _this.handleScripts();\n\t            });\n\t            request.open('GET', this.adServerUrl);\n\t            request.send();\n\t\n\t            if (!this.intervalId) {\n\t                this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'prefetchAd',\n\t        value: function prefetchAd() {\n\t            var _this2 = this;\n\t\n\t            var request = new XMLHttpRequest();\n\t\n\t            request.responseType = 'json';\n\t            request.addEventListener('load', function () {\n\t                _this2.adPool.push(request.response);\n\t            });\n\t            request.open('GET', this.adServerUrl);\n\t            request.send();\n\t        }\n\t    }, {\n\t        key: 'setUpdateInterval',\n\t        value: function setUpdateInterval(interval) {\n\t            if (!this.intervalId) {\n\t                this.config.updateInterval = interval;\n\t\n\t                return;\n\t            }\n\t\n\t            clearInterval(this.intervalId);\n\t            this.config.updateInterval = interval;\n\t            this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n\t        }\n\t    }, {\n\t        key: 'handleScripts',\n\t        value: function handleScripts() {\n\t            var _this3 = this;\n\t\n\t            var scriptsHtmlCollection = this.adContainer.getElementsByTagName('script');\n\t            var scriptsArray = [];\n\t            var i = void 0;\n\t\n\t            // converting scriptsHtmlCollection into an array just for convenience, mainly for sorting\n\t            // (in case no sorting is required, we can skip this part to and loop over collection itself)\n\t            for (i = 0; i < scriptsHtmlCollection.length; i++) {\n\t                scriptsArray.push(scriptsHtmlCollection[i]);\n\t            }\n\t\n\t            // sorting scripts to have libs (which don't have innerHTML) on top for right dependency order\n\t            // but maybe we can skip this, and rely on ad providers (API, .., ..) to not complicate things\n\t            //         scriptsArray.sort((prev, next) => {\n\t            //             if (!prev.innerHTML && next.innerHTML) {\n\t            //                 return -1;\n\t            //             }\n\t\n\t            //             if (prev.innerHTML && !next.innerHTML) {\n\t            //                 return 1;\n\t            //             }\n\t\n\t            //             return 0;\n\t            //         });\n\t\n\t            // as just inserting <script> into DOM\n\t            // via innerHTML of ad container doesn't make it work\n\t            // here we create script nodes/elements and append them into parent container.\n\t            // By default scripts are being run/loaded synchronously, so if they are in correct dependency order\n\t            // everything should just work :)\n\t            scriptsArray.forEach(function (scriptElement) {\n\t                var newScript = document.createElement('script');\n\t\n\t                newScript.type = 'text/javascript';\n\t\n\t                if (scriptElement.src) {\n\t                    newScript.src = scriptElement.src;\n\t                }\n\t\n\t                if (scriptElement.innerHTML) {\n\t                    newScript.text = scriptElement.innerHTML.replace(/setInterval/, 'var adScriptIntervalId = setInterval'); // this solution is also unreliable\n\t                    //                 newScript.text = scriptElement.innerHTML;\n\t                }\n\t\n\t                _this3.adContainer.removeChild(scriptElement);\n\t                _this3.adContainer.appendChild(newScript);\n\t            });\n\t\n\t            // using window.adScriptIntervalId instead of adScriptIntervalId here just to avoid errors about undefined variable\n\t            // in console (as not every ad may contain scripts with intervals)\n\t            // which are thrown because of class body declaration and expressions are evaluated in \"strict\" mode\n\t            if (window.adScriptIntervalId) {\n\t                // following are thoughts which came to my mind in the process of having final solution:\n\t                //\n\t                // in order to clear intervals which are remained after <script>\n\t                // have been removed from ad container (another ad has been arrived)\n\t                // it would be good that those scripts preserve interval id in a variable (but this way we enforcing a condition to ad providers)\n\t                // which later can be used here (to observe when script is removed from ad container and clear interval).\n\t                //\n\t                // Othervise similar code needs to be included in those <script> itself, so it can do observation on its own and clear introduced intervals\n\t                // (but observing generic parent, e.g. document.getElementById('adWS_DYN_INS_RAND').parentNode)\n\t                //\n\t                // Other solution might be to overwrite setInterval to store all intervalIds in an array and then do (new Error()).stack and analyse it\n\t                // in order to be able to differenciate between my and ad provider scripts (setInterval calls), but unfortunately Error.stack has a poor support\n\t                // for mobile (only Android 4.0 native browser, and Safari) - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack#Browser_compatibility\n\t                //\n\t                // Most reliable solution in my understanding is to have a convention.., backend can preprocess <script>s in order to provide frontend with array of interval ids\n\t                var obs = new MutationObserver(function (mutations, observer) {\n\t                    if (mutations[0].removedNodes.length) {\n\t                        clearInterval(window.adScriptIntervalId);\n\t                    }\n\t                });\n\t\n\t                obs.observe(this.adContainer, { childList: true });\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return AdClientLibrary;\n\t}();\n\t\n\texports.default = AdClientLibrary;\n\t;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// scripts/app.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 59857446ce4d3bc48bca","import AdClientLibrary from './lib/adClientLibrary.js';\n\n// import '../styles/app.scss';\n\nlet wisp = {};\n\nwisp.AdClientLibrary = AdClientLibrary;\n\nlet myAdInstance = new wisp.AdClientLibrary({\n    'containerId': 'topBanner',\n    'updateInterval': 3\n});\n\n// myAdInstance.setUpdateInterval(1);\n\nmyAdInstance.runAd();\n\n// let myAdInstance2 = new wisp.AdClientLibrary({\n//     'containerId': 'bottomBanner',\n//     'updateInterval': 5\n// });\n\n// myAdInstance2.runAd();\n\n// setTimeout(() => {\n//     console.log('changed interval');\n//     myAdInstance.setUpdateInterval(10);\n// },\n// 8000);\n\nexport {AdClientLibrary};\n\n\n// WEBPACK FOOTER //\n// ./src/js/app.js","export default class AdClientLibrary {\n    constructor(config) {\n        this.config = config;\n        this.adPool = [];\n        this.adServerUrl = 'https://5xhlcfzk8c.execute-api.eu-west-1.amazonaws.com/prod/mock-engine';//?forceAdId=2';\n        this.isAdBeingFetched = false;\n\n        this.adContainer = document.getElementById(this.config.containerId);\n\n        if (!this.adContainer) {\n            console.error('Wrong \"containerId\" - \"' + this.config.containerId + '\". There is no such element with that id.');\n        }\n\n        if (isNaN(this.config.updateInterval % 1)) {\n            console.error('Wrong \"updateInterval\" - \"' + this.config.updateInterval + '\". Please provide valid number.');\n        }\n    }\n\n    runAd() {\n        if (!this.adContainer) {\n            return;\n        }\n\n        if (this.adPool.length) {\n            let adData = this.adPool.pop();\n\n            this.adContainer.innerHTML = adData.ad;\n            this.handleScripts();\n\n            if (!this.intervalId) {\n                this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n            }\n\n            return;\n        }\n\n        if (this.isAdBeingFetched) {\n            return;\n        }\n\n        let request = new XMLHttpRequest();\n\n        request.responseType = 'json';\n        request.addEventListener('progress', () => {\n            this.isAdBeingFetched = true;\n        });\n        request.addEventListener('error', () => {\n            this.isAdBeingFetched = false;\n        });\n        request.addEventListener('abort', () => {\n            this.isAdBeingFetched = false;\n        });\n        request.addEventListener('load', () => {\n            this.isAdBeingFetched = false;\n\n            this.adContainer.innerHTML = request.response.ad;\n            this.handleScripts();\n        });\n        request.open('GET', this.adServerUrl);\n        request.send();\n\n        if (!this.intervalId) {\n            this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n        }\n    }\n\n    prefetchAd() {\n        let request = new XMLHttpRequest();\n\n        request.responseType = 'json';\n        request.addEventListener('load', () => {\n            this.adPool.push(request.response);\n        });\n        request.open('GET', this.adServerUrl);\n        request.send();\n    }\n\n    setUpdateInterval(interval) {\n        if (!this.intervalId) {\n            this.config.updateInterval = interval;\n\n            return;\n        }\n\n        clearInterval(this.intervalId);\n        this.config.updateInterval = interval;\n        this.intervalId = setInterval(this.runAd.bind(this), this.config.updateInterval * 1000);\n    }\n\n    handleScripts() {\n        let scriptsHtmlCollection = this.adContainer.getElementsByTagName('script');\n        let scriptsArray = [];\n        let i;\n\n        // converting scriptsHtmlCollection into an array just for convenience, mainly for sorting\n        // (in case no sorting is required, we can skip this part to and loop over collection itself)\n        for(i = 0; i < scriptsHtmlCollection.length; i++) {\n            scriptsArray.push(scriptsHtmlCollection[i]);\n        }\n\n        // sorting scripts to have libs (which don't have innerHTML) on top for right dependency order\n        // but maybe we can skip this, and rely on ad providers (API, .., ..) to not complicate things\n//         scriptsArray.sort((prev, next) => {\n//             if (!prev.innerHTML && next.innerHTML) {\n//                 return -1;\n//             }\n\n//             if (prev.innerHTML && !next.innerHTML) {\n//                 return 1;\n//             }\n\n//             return 0;\n//         });\n\n        // as just inserting <script> into DOM\n        // via innerHTML of ad container doesn't make it work\n        // here we create script nodes/elements and append them into parent container.\n        // By default scripts are being run/loaded synchronously, so if they are in correct dependency order\n        // everything should just work :)\n        scriptsArray.forEach((scriptElement) => {\n            var newScript = document.createElement('script');\n\n            newScript.type = 'text/javascript';\n\n            if (scriptElement.src) {\n                newScript.src = scriptElement.src;\n            }\n\n            if (scriptElement.innerHTML) {\n                newScript.text = scriptElement.innerHTML.replace(/setInterval/, 'var adScriptIntervalId = setInterval'); // this solution is also unreliable\n//                 newScript.text = scriptElement.innerHTML;\n            }\n\n            this.adContainer.removeChild(scriptElement);\n            this.adContainer.appendChild(newScript);\n        });\n\n        // using window.adScriptIntervalId instead of adScriptIntervalId here just to avoid errors about undefined variable\n        // in console (as not every ad may contain scripts with intervals)\n        // which are thrown because of class body declaration and expressions are evaluated in \"strict\" mode\n        if (window.adScriptIntervalId) {\n            // following are thoughts which came to my mind in the process of having final solution:\n            //\n            // in order to clear intervals which are remained after <script>\n            // have been removed from ad container (another ad has been arrived)\n            // it would be good that those scripts preserve interval id in a variable (but this way we enforcing a condition to ad providers)\n            // which later can be used here (to observe when script is removed from ad container and clear interval).\n            //\n            // Othervise similar code needs to be included in those <script> itself, so it can do observation on its own and clear introduced intervals\n            // (but observing generic parent, e.g. document.getElementById('adWS_DYN_INS_RAND').parentNode)\n            //\n            // Other solution might be to overwrite setInterval to store all intervalIds in an array and then do (new Error()).stack and analyse it\n            // in order to be able to differenciate between my and ad provider scripts (setInterval calls), but unfortunately Error.stack has a poor support\n            // for mobile (only Android 4.0 native browser, and Safari) - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack#Browser_compatibility\n            //\n            // Most reliable solution in my understanding is to have a convention.., backend can preprocess <script>s in order to provide frontend with array of interval ids\n            var obs = new MutationObserver(function(mutations, observer) {\n                if(mutations[0].removedNodes.length) {\n                    clearInterval(window.adScriptIntervalId);\n                }\n            });\n\n            obs.observe(this.adContainer, {childList: true});\n        }\n    }\n};\n\n\n// WEBPACK FOOTER //\n// ./src/js/lib/adClientLibrary.js"],"sourceRoot":""}